---

# project information
project_name: rdesktop
project_url: "http://xrdp.org/"
project_logo: "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/rdesktop.png"
project_blurb: |
  [{{ project_name|capitalize }}]({{ project_url }}) - Containers containing full desktop environments in many popular flavors for Alpine, Ubuntu, Arch, and Fedora accessible via RDP.
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"
project_categories: "Remote Desktop"
# supported architectures
available_architectures:
  - {arch: "{{ arch_x86_64 }}", tag: "amd64-latest"}
  - {arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}
# development version
development_versions: true
development_versions_items:
  - {tag: "ubuntu-xfce", desc: "XFCE Ubuntu"}
  - {tag: "ubuntu-kde", desc: "KDE Ubuntu"}
  - {tag: "ubuntu-mate", desc: "MATE Ubuntu"}
  - {tag: "ubuntu-i3", desc: "i3 Ubuntu"}
  - {tag: "ubuntu-openbox", desc: "Openbox Ubuntu"}
  - {tag: "ubuntu-icewm", desc: "IceWM Ubuntu"}
# container parameters
param_container_name: "{{ project_name }}"
param_usage_include_ports: true
param_ports:
  - {external_port: "3389", internal_port: "3389", port_desc: "RDP access port"}
# optional variables
opt_param_usage_include_vols: true
opt_param_volumes:
  - {vol_path: "/var/run/docker.sock", vol_host_path: "/var/run/docker.sock", desc: "Docker Socket on the system, if you want to use Docker in the container"}
  - {vol_path: "/config", vol_host_path: "/path/to/{{ project_name }}/data", desc: "abc users home directory"}
opt_custom_params:
  - {name: "shm-size", name_compose: "shm_size", value: "1gb", desc: "We set this to 1 gig to prevent modern web browsers from crashing"}
opt_security_opt_param: true
opt_security_opt_param_vars:
  - {run_var: "seccomp=unconfined", compose_var: "seccomp:unconfined", desc: "For Docker Engine only, many modern gui apps need this to function as syscalls are unknown to Docker"}
opt_param_device_map: true
opt_param_devices:
  - {device_path: "/dev/dri", device_host_path: "/dev/dri", desc: "Add this for GL support (Linux hosts only)"}
# application setup block
app_setup_block_enabled: true
app_setup_block: |
  **The Default USERNAME and PASSWORD is: abc/abc**

  **Unlike our other containers these Desktops are not designed to be upgraded by Docker, you will keep your home directory but anything you installed system level will be lost if you upgrade an existing container. To keep packages up to date instead use Ubuntu's own apt, Alpine's apk, Fedora's dnf, or Arch's pacman program**

  You will need a Remote Desktop client to access this container [Wikipedia List](https://en.wikipedia.org/wiki/Comparison_of_remote_desktop_software), by default it listens on 3389, but you can change that port to whatever you wish on the host side IE `3390:3389`.
  The first thing you should do when you login to the container is to change the abc users password by issuing the `passwd` command.

  **Modern GUI desktop apps (including some flavors terminals) have issues with the latest Docker and syscall compatibility, you can use Docker with the `--security-opt seccomp=unconfined` setting to allow these syscalls or try [podman](https://podman.io/) as they have updated their codebase to support them**

  If you ever lose your password you can always reset it by execing into the container as root:

  ```bash
  docker exec -it rdesktop passwd abc
  ```

  By default we perform all logic for the abc user and we recommend using that user only in the container, but new users can be added as long as there is a `startwm.sh` executable script in their home directory.
  All of these containers are configured with passwordless sudo, we make no efforts to secure or harden these containers and we do not recommend ever publishing their ports to the public Internet.

  ## Options

  All application settings are passed via environment variables:

  | Variable | Description |
  | :----: | --- |
  | LC_ALL | Set the Language for the container to run as IE `fr_FR.UTF-8` `ar_AE.UTF-8` |
  | NO_DECOR | If set the application will run without window borders. (Decor can be enabled and disabled with Ctrl+Shift+d) |
  | NO_FULL | Do not autmatically fullscreen applications when using openbox. |

  ### Language Support - Internationalization

  The environment variable `LC_ALL` can be used to start this image in a different language than English simply pass for example to launch the Desktop session in French `LC_ALL=fr_FR.UTF-8`. Some languages like Chinese, Japanese, or Korean will be missing fonts needed to render properly known as cjk fonts, but others may exist and not be installed. We only ensure fonts for Latin characters are present. Fonts can be installed with a mod on startup.

  To install cjk fonts on startup as an example pass the environment variables(Debian):

  ```
  -e DOCKER_MODS=linuxserver/mods:universal-package-install
  -e INSTALL_PACKAGES=fonts-noto-cjk
  -e LC_ALL=zh_CN.UTF-8
  ```

  ## PRoot Apps

  All images include [proot-apps](https://github.com/linuxserver/proot-apps) which allow portable applications to be installed to persistent storage in the user's `$HOME` directory. These applications and their settings will persist upgrades of the base container and can be mounted into different flavors of rdesktop containers. IE if you are running an Alpine based container you will be able to use the same `/config` directory mounted into an Ubuntu based container and retain the same applications and settings as long as they were installed with `proot-apps install`.

  A list of linuxserver.io supported applications is located [HERE](https://github.com/linuxserver/proot-apps?tab=readme-ov-file#supported-apps).

  ## Open Source GPU Acceleration

  For accelerated apps or games, render devices can be mounted into the container and leveraged by applications using:

  `--device /dev/dri:/dev/dri`

  This feature only supports **Open Source** GPU drivers:

  | Driver | Description |
  | :----: | --- |
  | Intel | i965 and i915 drivers for Intel iGPU chipsets |
  | AMD | AMDGPU, Radeon, and ATI drivers for AMD dedicated or APU chipsets |
  | NVIDIA | nouveau2 drivers only, closed source NVIDIA drivers lack DRI3 support |

  ## Nvidia GPU Support

  **Nvidia is not compatible with Alpine based images**

  Nvidia support is available by leveraging Zink for OpenGL support. This can be enabled with the following run flags:

  | Variable | Description |
  | :----: | --- |
  | --gpus all | This can be filtered down but for most setups this will pass the one Nvidia GPU on the system |
  | --runtime nvidia | Specify the Nvidia runtime which mounts drivers and tools in from the host |

  The compose syntax is slightly different for this as you will need to set nvidia as the default runtime:

  ```
  sudo nvidia-ctk runtime configure --runtime=docker --set-as-default
  sudo service docker restart
  ```

  And to assign the GPU in compose:

  ```
  services:
    myimage:
      image: myname/myimage:mytag
      deploy:
        resources:
          reservations:
            devices:
              - driver: nvidia
                count: 1
                capabilities: [compute,video,graphics,utility]
  ```
# init diagram
init_diagram: |
  "rdesktop:latest": {
    docker-mods
    base {
      fix-attr +\nlegacy cont-init
    }
    docker-mods -> base
    legacy-services
    custom services
    init-services -> legacy-services
    init-services -> custom services
    custom services -> legacy-services
    legacy-services -> ci-service-check
    init-migrations -> init-adduser
    init-os-end -> init-config
    init-rdesktop-end -> init-config
    init-config -> init-config-end
    init-os-end -> init-crontab-config
    init-mods-end -> init-custom-files
    init-adduser -> init-device-perms
    base -> init-envfile
    init-os-end -> init-keygen
    base -> init-migrations
    base -> init-mods
    init-config-end -> init-mods
    init-mods -> init-mods-end
    init-mods-package-install -> init-mods-end
    init-mods -> init-mods-package-install
    base -> init-os-end
    init-adduser -> init-os-end
    init-device-perms -> init-os-end
    init-envfile -> init-os-end
    init-migrations -> init-os-end
    init-keygen -> init-rdesktop
    init-keygen -> init-rdesktop-config
    init-video -> init-rdesktop-end
    init-custom-files -> init-services
    init-mods-end -> init-services
    init-rdesktop -> init-video
    init-rdesktop-config -> init-video
    init-services -> svc-cron
    svc-cron -> legacy-services
    init-services -> svc-xrdp
    svc-xrdp-sesman -> svc-xrdp
    svc-xrdp -> legacy-services
    init-services -> svc-xrdp-sesman
    svc-xrdp-sesman -> legacy-services
  }
  Base Images: {
    "baseimage-rdesktop:alpine320" <- "baseimage-alpine:3.20"
  }
  "rdesktop:latest" <- Base Images
# changelog
changelogs:
  - {date: "30.09.25:", desc: "Deprecate all non-Ubuntu versions."}
  - {date: "06.08.24:", desc: "Refresh all images using new bases, add Debian, bump Ubuntu to Noble."}
  - {date: "27.05.24:", desc: "Rebase to Alpine 3.20 and Fedora 40."}
  - {date: "17.01.24:", desc: "Sync webtop logic changes rebase to Alpine 3.19 and Fedora 39."}
  - {date: "18.05.23:", desc: "Rebase all Alpine images to 3.18, deprecate armhf."}
  - {date: "27.10.22:", desc: "Rebase all Ubuntu images to Jammy 22.04."}
  - {date: "26.10.22:", desc: "Rebase Alpine xfce to 3.16, migrate to s6v3."}
  - {date: "05.03.22:", desc: "Organize tags differently to run Ubuntu at latest LTS, make Alpine latest, add docs about GPU accel."}
  - {date: "05.05.21:", desc: "Reduce default packages to their flavour specific basics."}
  - {date: "05.04.21:", desc: "Add Alpine flavour."}
  - {date: "06.04.20:", desc: "Start PulseAudio in images to support audio"}
  - {date: "28.02.20:", desc: "Initial Releases"}

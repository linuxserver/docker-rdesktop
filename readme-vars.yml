---

# project information
project_name: rdesktop
project_url: "http://xrdp.org/"
project_logo: "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/rdesktop.png"
project_blurb: |
  [{{ project_name|capitalize }}]({{ project_url }}) - Containers containing full desktop environments in many popular flavors for Alpine, Ubuntu, Arch, and Fedora accessible via RDP.
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"

# supported architectures
available_architectures:
  - { arch: "{{ arch_x86_64 }}", tag: "amd64-latest"}
  - { arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}
  - { arch: "{{ arch_armhf }}", tag: "arm32v7-latest"}

# development version
development_versions: true
development_versions_items:
  - { tag: "latest", desc: "XFCE Alpine" }
  - { tag: "ubuntu-xfce", desc: "XFCE Ubuntu" }
  - { tag: "fedora-xfce", desc: "XFCE Fedora" }
  - { tag: "arch-xfce", desc: "XFCE Arch" }
  - { tag: "alpine-kde", desc: "KDE Alpine" }
  - { tag: "ubuntu-kde", desc: "KDE Ubuntu" }
  - { tag: "fedora-kde", desc: "KDE Fedora" }
  - { tag: "arch-kde", desc: "KDE Arch" }
  - { tag: "alpine-mate", desc: "MATE Alpine" }
  - { tag: "ubuntu-mate", desc: "MATE Ubuntu" }
  - { tag: "fedora-mate", desc: "MATE Fedora" }
  - { tag: "arch-mate", desc: "MATE Arch" }
  - { tag: "alpine-i3", desc: "i3 Alpine" }
  - { tag: "ubuntu-i3", desc: "i3 Ubuntu" }
  - { tag: "fedora-i3", desc: "i3 Fedora" }
  - { tag: "arch-i3", desc: "i3 Arch" }
  - { tag: "alpine-openbox", desc: "Openbox Alpine" }
  - { tag: "ubuntu-openbox", desc: "Openbox Ubuntu" }
  - { tag: "fedora-openbox", desc: "Openbox Fedora" }
  - { tag: "arch-openbox", desc: "Openbox Arch" }
  - { tag: "alpine-icewm", desc: "IceWM Alpine" }
  - { tag: "ubuntu-icewm", desc: "IceWM Ubuntu" }
  - { tag: "fedora-icewm", desc: "IceWM Fedora" }
  - { tag: "arch-icewm", desc: "IceWM Arch" }

# container parameters
param_container_name: "{{ project_name }}"
param_usage_include_vols: false
param_usage_include_ports: true
param_ports:
  - { external_port: "3389", internal_port: "3389", port_desc: "RDP access port" }
param_usage_include_env: true
param_env_vars:
  - { env_var: "TZ", env_value: "Europe/London", desc: "Specify a timezone to use EG Europe/London"}
# optional variables
opt_param_usage_include_vols: true
opt_param_volumes:
  - { vol_path: "/var/run/docker.sock", vol_host_path: "/var/run/docker.sock", desc: "Docker Socket on the system, if you want to use Docker in the container" }
  - { vol_path: "/config", vol_host_path: "/path/to/data", desc: "abc users home directory" }
opt_custom_params:
  - { name: "shm-size", name_compose: "shm_size", value: "1gb",desc: "We set this to 1 gig to prevent modern web browsers from crashing" }
opt_security_opt_param: true
opt_security_opt_param_vars:
  - { run_var: "seccomp=unconfined", compose_var: "seccomp:unconfined", desc: "For Docker Engine only, many modern gui apps need this to function as syscalls are unkown to Docker" }
opt_param_device_map: true
opt_param_devices:
  - { device_path: "/dev/dri", device_host_path: "/dev/dri", desc: "Add this for GL support (Linux hosts only)" }

# application setup block
app_setup_block_enabled: true
app_setup_block: |
  **The Default USERNAME and PASSWORD is: abc/abc**
  
  **Unlike our other containers these Desktops are not designed to be upgraded by Docker, you will keep your home directoy but anything you installed system level will be lost if you upgrade an existing container. To keep packages up to date instead use Ubuntu's own apt, Alpine's apk, Fedora's dnf, or Arch's pacman program**

  You will need a Remote Desktop client to access this container [Wikipedia List](https://en.wikipedia.org/wiki/Comparison_of_remote_desktop_software), by default it listens on 3389, but you can change that port to whatever you wish on the host side IE `3390:3389`.
  The first thing you should do when you login to the container is to change the abc users password by issuing the `passwd` command.

  **Modern GUI desktop apps (including some flavors terminals) have issues with the latest Docker and syscall compatibility, you can use Docker with the `--security-opt seccomp=unconfined` setting to allow these syscalls or try [podman](https://podman.io/) as they have updated their codebase to support them**
 
  If you ever lose your password you can always reset it by execing into the container as root:
  ```
  docker exec -it rdesktop passwd abc
  ```
  By default we perform all logic for the abc user and we reccomend using that user only in the container, but new users can be added as long as there is a `startwm.sh` executable script in their home directory.
  All of these containers are configured with passwordless sudo, we make no efforts to secure or harden these containers and we do not reccomend ever publishing their ports to the public Internet.

  ## Hardware Acceleration (Ubuntu Container Only)
  
  Many desktop application will need access to a GPU to function properly and even some Desktop Environments have compisitor effects that will not function without a GPU. This is not a hard requirement and all base images will function without a video device mounted into the container.
  
  ### Intel/ATI/AMD
  
  To leverage hardware acceleration you will need to mount /dev/dri video device inside of the conainer.
  ```
  --device=/dev/dri:/dev/dri
  ```
  We will automatically ensure the abc user inside of the container has the proper permissions to access this device.
  ### Nvidia
  
  Hardware acceleration users for Nvidia will need to install the container runtime provided by Nvidia on their host, instructions can be found here:
  https://github.com/NVIDIA/nvidia-docker
  
  We automatically add the necessary environment variable that will utilise all the features available on a GPU on the host. Once nvidia-docker is installed on your host you will need to re/create the docker container with the nvidia container runtime `--runtime=nvidia` and add an environment variable `-e NVIDIA_VISIBLE_DEVICES=all` (can also be set to a specific gpu's UUID, this can be discovered by running `nvidia-smi --query-gpu=gpu_name,gpu_uuid --format=csv` ). NVIDIA automatically mounts the GPU and drivers from your host into the container.

  ### Arm Devices

  Best effort is made to install tools to allow mounting in /dev/dri on Arm devices. In most cases if /dev/dri exists on the host it should just work. If running a Raspberry Pi 4 be sure to enable `dtoverlay=vc4-fkms-v3d` in your usercfg.txt.

# changelog
changelogs:
  - { date: "27.10.22:", desc: "Rebase all Ubuntu images to Jammy 22.04." }
  - { date: "26.10.22:", desc: "Rebase Alpine xfce to 3.16, migrate to s6v3." }
  - { date: "05.03.22:", desc: "Organize tags differently to run Ubuntu at latest LTS, make Alpine latest, add docs about GPU accel." }
  - { date: "05.05.21:", desc: "Reduce default packages to their flavor specific basics." }
  - { date: "05.04.21:", desc: "Add Alpine flavor." }
  - { date: "06.04.20:", desc: "Start PulseAudio in images to support audio" }
  - { date: "28.02.20:", desc: "Initial Releases" }
